// Selectors
document.querySelector('form').addEventListener('submit', handleSubmitForm);
document.querySelector('ul').addEventListener('click', handleDelete);
document.getElementById('clearAll').addEventListener('click', handleClearAll);
document.getElementById('sortingDropdown').addEventListener('change', handleSortingValueChange);

//Global variables
var idSessionStorage = 0;
var heatIcon = './pics/heatIcon.png'
var pizzasForSort = [];




// Event Handlers

/*
 * Submit button handler - forms a pizza object and passes it to addNewPizza for adding to sessionStorage and displaying in the list on the webpage
 */
function handleSubmitForm(e) {
    e.preventDefault();
    //let input = document.querySelector('input');

    let name = document.getElementById("name").value;
    let price = document.getElementById("price").value;
    let heat = document.getElementById("heat").value;

    let toppings = [];
    let toppingsHTMLNodes = document.getElementsByName("toppings");
    console.log(toppingsHTMLNodes);
    for (i = 0; i < toppingsHTMLNodes.length; i++){
        //if 'checked' is true then add the 'value' to 'toppings'
        console.log("checked is " + toppingsHTMLNodes[i].checked);
        if (toppingsHTMLNodes[i].checked) {
            toppings.push(toppingsHTMLNodes[i].value);
        }
    }

    console.log("selected toppings are: ");
    console.log(toppings);

    let photo = "";
    let photosHTMLNodes = document.getElementsByName("photo");
    console.log(photosHTMLNodes);
    for (i = 0; i < photosHTMLNodes.length; i++) {
        //if 'checked' is true then save the 'value' as 'photo'
        console.log("checked is " + photosHTMLNodes[i].checked);
        if (photosHTMLNodes[i].checked) {
            photo = photosHTMLNodes[i].value;
        }
    }
    console.log(photo);

    let newPizza = {
        'id': idSessionStorage,
        'name': name,
        'price': price,
        'heat': heat,
        'toppings': toppings,
        'photo': photo
    };

    //console.log(toppings);

    if (toppings.length >= 2) { //toppings: Array<string> // required, min-length 2 (other required parameters are handled with 'required' keyword in index.html)
        console.log("length checked");
        console.log(newPizza);
        addPizza(newPizza);
    }
    else {
        window.alert("Please choose at least 2 toppings")
    }

}
/*
 * 'Delete pizza' button click handler - passes the event object to deletePizza for deletion from sessionStorage and the list on the webpage
 */
function handleDelete(e) {
    if (e.target.name == 'deleteButton')
        deletePizza(e);
}

/*
 * 'Clear all' button click handler - clears sessionStorage and calls clearDisplayedList to clear the list on the webpage
 */
function handleClearAll(e) {
    /*for (i = 0; i < sessionStorage.length; i++) { 
        sessionStorage.removeItem(i);
    }*/
    sessionStorage.clear();

    clearDisplayedList();
}

/*
 * Sorting dropdown menu value change handler - calls sortPizzas with appropriate parameters
 */
function handleSortingValueChange(e) {
    console.log("sortingDropdown value is " + e.target.value);

    if (e.target.value != "") {
        switch (e.target.value) {
            case "nameASC":
                sortPizzas("name", true);
                break;
            case "nameDESC":
                sortPizzas("name", false);
                break;
            case "priceASC":
                sortPizzas("price", true);
                break;
            case "priceDESC":
                sortPizzas("price", false);
                break;
            case "heatASC":
                sortPizzas("heat", true);
                break;
            case "heatDESC":
                sortPizzas("heat", false);
                break;
            default:
                break;
        }
    }
}

// Helpers

/*
 * addPizza method - adds the 'pizza' object to sessionStorage, calls displayAddedPizza to display the added object in the list and increments the idSessionStorage
 */
function addPizza(pizza) {
    sessionStorage.setItem(idSessionStorage, JSON.stringify(pizza));
    //let prevId = idSessionStorage;
    console.log("added to sessionStorage");
    console.log(JSON.parse(sessionStorage.getItem(idSessionStorage)));

    displayAddedPizza(pizza);

    idSessionStorage++;
}

/**
 * deletePizza method - displays the confirmation dialog for deletion. If the user confirms deletion, removes the object from sessionStorage and calls removeDeletedPizzaFromDisplay to remove the object from the list
 * @param {any} e the event generated by the user clicking the 'Delete pizza' button
 */
function deletePizza(e) {
    console.log("e.target.value is " + e.target.value);
    if (window.confirm("Do you really want to delete this pizza?")) {
        sessionStorage.removeItem(e.target.value);
        console.log("getItem returned " + sessionStorage.getItem(e.target.value)); //checking if the item was actually deleted from sessionStorage (expected result is 'null')
        console.log(sessionStorage.getItem(e.target.value)); //checking if the item was actually deleted from sessionStorage (expected result is 'null')

        removeDeletedPizzaFromDisplay(e);
    }
}

/**
 * displayAddedPizza method - displays the 'pizza' object in the list on the webpage and resets the submit form
 * @param {any} pizza the object to be added to the list
 */
function displayAddedPizza(pizza) {
    let ul = document.querySelector('ul');
    let li = document.createElement('li');

    let heatDisplayString = "";
    if (pizza.heat > 0) {
        for (i = 0; i < pizza.heat; i++) heatDisplayString += `<img src="${heatIcon}" alt="heat icon" width="20" height="20"/>`;
    }

    if (photo != "") {
        li.innerHTML = `
            <span class="pizza-item"> ${pizza.id} ${pizza.name} ${pizza.price} ${heatDisplayString} ${pizza.toppings} <img src="${pizza.photo}" alt="Photo of pizza" width="20" height="20"/></span >
            <button name="deleteButton" value="${pizza.id}">Delete pizza</button> `;
    }
    else {
        li.innerHTML = `
            <span class="pizza-item"> ${pizza.id} ${pizza.name} ${pizza.price} ${heatDisplayString} ${pizza.toppings} </span >
            <button name="deleteButton" value="${pizza.id}">Delete pizza</button> `;
    }

    li.classList.add('pizza-list-item');
    li.value = pizza.id;
    console.log("li.value is " + li.value);
    ul.appendChild(li);

    document.getElementById("form").reset();
}

/**
 * removeDeletedPizzaFromDisplay method - removes the deleted pizza object from the list on the website
 * @param {any} e the event generated by the user clicking the 'Delete pizza' button
 */
function removeDeletedPizzaFromDisplay(e) {
    let item = e.target.parentNode;

    item.addEventListener('transitionend', function () {
        item.remove();
    });

    item.classList.add('pizza-list-item-fall');
}

/**
 * clearDisplayedList() method - clears the list of pizzas on the website
 * */
function clearDisplayedList() {
    document.querySelector('ul').innerHTML = '';
}

/**
 * sortPizza method - sorts the pizza list on the website according to specified attribute (name, price, heat) and order (ascending or descending)
 * @param {any} attribute the attribute by which to sort the list (name, price, heat)
 * @param {any} ascending the order in which to sort the list (ascending or descending)
 */
function sortPizzas(attribute, ascending) {
    //let pizzas = [];

    pizzasForSort = [];

    for (i = 0; i < sessionStorage.length; i++) { 
        pizzasForSort.push(JSON.parse(sessionStorage.getItem(i)));
        console.log(JSON.parse(sessionStorage.getItem(i)));
    }

    if (attribute == "name") {
        console.log("sorting by name");
        if (ascending) {
            console.log("ascending");
            pizzasForSort.sort(function (a, b) {
                if (a.name < b.name) { return -1; }
                if (a.name > b.name) { return 1; }
                return 0;
            });
        }
        else {
            pizzasForSort.sort(function (a, b) {
                if (a.name > b.name) { return -1; }
                if (a.name < b.name) { return 1; }
                return 0;
            });
        }

        console.log("pizzasForSort by names is: ");
        for (i = 0; i < pizzasForSort.length; i++) {
            console.log(pizzasForSort[i].name);
        }
    }
    else if (attribute == "price") {
        console.log("sorting by price");
        if (ascending) {
            console.log("ascending");
            pizzasForSort.sort(function (a, b) {
                if (parseFloat(a.price) < parseFloat(b.price)) { return -1; }
                if (parseFloat(a.price) > parseFloat(b.price)) { return 1; }
                return 0;
            });
        }
        else {
            pizzasForSort.sort(function (a, b) {
                if (parseFloat(a.price) > parseFloat(b.price)) { return -1; }
                if (parseFloat(a.price) < parseFloat(b.price)) { return 1; }
                return 0;
            });
        }

        console.log("pizzasForSort by prices is: ");
        for (i = 0; i < pizzasForSort.length; i++) {
            console.log(pizzasForSort[i].price);
        }
    }
    else if (attribute == "heat") {
        console.log("sorting by heat");
        if (ascending) {
            console.log("ascending");
            pizzasForSort.sort(function (a, b) {
                if (parseInt(a.heat, 10) < parseInt(b.heat, 10)) { return -1; }
                if (parseInt(a.heat, 10) > parseInt(b.heat, 10)) { return 1; }
                return 0;
            });
        }
        else {
            pizzasForSort.sort(function (a, b) {
                if (parseInt(a.heat, 10) > parseInt(b.heat, 10)) { return -1; }
                if (parseInt(a.heat, 10) < parseInt(b.heat, 10)) { return 1; }
                return 0;
            });
        }

        console.log("pizzasForSort by heat is: ");
        for (i = 0; i < pizzasForSort.length; i++) {
            console.log(pizzasForSort[i].heat);
        }
    }

    updateDisplayedList();
    
}

/**
 * updateDisplayedList method - updates the list on the website according to the sorting results
 * */
function updateDisplayedList() {
    clearDisplayedList();

    console.log("pizzasForSort.length in updateDisplayedList is " + pizzasForSort.lenght);

    for (i = 0; i < pizzasForSort.length; i++) {
        //let pizza = JSON.parse(sessionStorage.getItem(i));
        console.log(pizzasForSort[i]);
        displayAddedPizza(pizzasForSort[i], i);
    }
}